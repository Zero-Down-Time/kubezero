snapshotController:
  enabled: true
  replicas: 1
  logLevel: 2

  tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule
  nodeSelector:
    node-role.kubernetes.io/control-plane: ""

  resources:
    requests:
      memory: 16Mi
      cpu: 20m
    limits:
      memory: 64Mi
      cpu: 100m

lvm-localpv:
  enabled: false

  lvmNode:
    logLevel: 2
    nodeSelector:
      node.kubernetes.io/lvm: "openebs"
    tolerations:
    - key: kubezero-workergroup
      effect: NoSchedule
      operator: Exists

  lvmController:
    logLevel: 2
    tolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
    nodeSelector:
      node-role.kubernetes.io/control-plane: ""

  storageClass:
    vgpattern: ""
    default: false

  analytics:
    enabled: false

  prometheus:
    enabled: false

gemini:
  enabled: false
  # verbosity: 1

  resources:
    requests:
      memory: 32Mi
      cpu: 20m
    limits:
      memory: 128Mi
      cpu: 400m


aws-ebs-csi-driver:
  enabled: false

  # starting with 1.6 the ebs-plugin panics with "could not get number of attached ENIs"
  # somewhere related to metadata / volumeattach limits and nitro instances ... AWS as usual
  image:
    tag: v1.5.3

  controller:
    replicaCount: 1
    logLevel: 2

    defaultFsType: xfs

    nodeSelector:
      node-role.kubernetes.io/control-plane: ""
    tolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule

    # k8sTagClusterId: <CLUSTER_NAME>
    # region: <AWS_DEFAULT_REGION>

    #env:
    #  ebsPlugin:
      #- name: AWS_ROLE_ARN
      #  value: "<ebs-csi-driver IAM ROLE ARN>"
      #- name: AWS_WEB_IDENTITY_TOKEN_FILE
      #  value: "/var/run/secrets/sts.amazonaws.com/serviceaccount/token"
      #- name: AWS_STS_REGIONAL_ENDPOINTS
      #  value: regional
    resources:
      requests:
        cpu: 10m
        memory: 24Mi
      limits:
        # cpu: 50m
        memory: 40Mi

  node:
    tolerations:
    - key: kubezero-workergroup
      effect: NoSchedule
      operator: Exists

    resources:
      requests:
        cpu: 10m
        memory: 16Mi
      limits:
        # cpu: 50m
        memory: 32Mi

  storageClasses:
  - name: ebs-sc-gp2-xfs
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true
    parameters:
      csi.storage.k8s.io/fstype: xfs
      type: gp2
      encrypted: "true"
  - name: ebs-sc-gp3-xfs
    annotations:
      storageclass.kubernetes.io/is-default-class: "true"
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true
    parameters:
      csi.storage.k8s.io/fstype: xfs
      type: gp3
      encrypted: "true"


aws-efs-csi-driver:
  enabled: false

  replicaCount: 1

  controller:
    create: true
    logLevel: 2

    tolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
    nodeSelector:
      node-role.kubernetes.io/control-plane: ""

    #extraEnv:
    #- name: AWS_ROLE_ARN
    #  value: "<aws-efs-csi-driver IAM ROLE ARN>"
    #- name: AWS_WEB_IDENTITY_TOKEN_FILE
    #  value: "/var/run/secrets/sts.amazonaws.com/serviceaccount/token"
    #- name: AWS_STS_REGIONAL_ENDPOINTS
    #  value: regional

  node:
    logLevel: 2

    resources:
      requests:
        cpu: 20m
        memory: 64Mi
      limits:
        memory: 128Mi

    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node.kubernetes.io/csi.efs.fs
              operator: Exists
    tolerations:
    - key: kubezero-workergroup
      effect: NoSchedule
      operator: Exists

  #storageClasses:
  #- name: efs-sc
  #  parameters:
  #    provisioningMode: efs-ap
  #    directoryPerms: "700"
  #    fileSystemId: <efs-id-from-worker-cfn>

  #PersistentVolumes:
  #  - name: example-pv
  #    mountOptions:
  #    - tls
  #    volumeHandle: "<efs-id>:/path"
  #    claimRef:
  #      name: foo-pvc
  #      namespace: foo
  #
  #  - name: example-pv2
  #    volumeHandle: "<efs-id>:/path2"
